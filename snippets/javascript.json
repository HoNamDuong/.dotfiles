{
    "Set Timeout Function": {
        "prefix": "settimeout",
        "body": ["setTimeout(() => {", "\t$2", "}, ${1:timeout})"]
    },
    "Set Interval Function": {
        "prefix": "setinterval",
        "body": ["setInterval(() => {", "\t$2", "}, ${1:interval})"]
    },

    "import module": {
        "prefix": "import",
        "body": "import ${2:*} from '${1:module}'"
    },
    "require": {
        "prefix": "require",
        "body": "require('${1:module}')"
    },
    "const module = require('module')": {
        "prefix": "require",
        "body": "const ${1:module} = require('${1:module}')"
    },
    "module.exports": {
        "prefix": "exports",
        "body": "module.exports = ${1:name}"
    },

    "forEach loop": {
        "prefix": "forEach",
        "body": "${1:iterable}.forEach((${2:item}) => {\n\t${3}\n})"
    },
    "map": {
        "prefix": "map",
        "body": "${1:iterable}.map((${2:item}) => {\n\t${3}\n})"
    },
    "reduce": {
        "prefix": "reduce",
        "body": "${1:iterable}.reduce((${2:previous}, ${3:current}) => {\n\t${5}\n}${4:, initial})"
    },
    "filter": {
        "prefix": "filter",
        "body": "${1:iterable}.filter((${2:item}) => {\n\t${3}\n})"
    },
    "find": {
        "prefix": "find",
        "body": "${1:iterable}.find((${2:item}) => {\n\t${3}\n})"
    },
    "every": {
        "prefix": "every",
        "body": "${1:iterable}.every((${2:item}) => {\n\t${3}\n})"
    },
    "some": {
        "prefix": "some",
        "body": "${1:iterable}.some((${2:item}) => {\n\t${3}\n})"
    },

    "const statement": {
        "prefix": "const",
        "body": "const ${1:name} = ${2:value}"
    },
    "const statement from destructuring": {
        "prefix": "const",
        "body": "const { ${2:prop} } = ${1:value}"
    },

    "new Promise": {
        "prefix": "promise",
        "body": "new Promise((resolve, reject) => {\n\t${1}\n})"
    },

    "try/catch": {
        "prefix": "try",
        "body": "try {\n\t${2}\n} catch (${1:err}) {\n\t${3}\n}"
    },
    "try/catch/finally": {
        "prefix": "try",
        "body": "try {\n\t${2}\n} catch (${1:err}) {\n\t${3}\n} finally {\n\t${4}\n}"
    },

    "arrow function": {
        "prefix": "function",
        "body": "(${1}) => ${2}"
    },
    "function statement": {
        "prefix": "function",
        "body": ["function ${1:name}(${2:params}) {", "\t$3", "}"]
    },
    "anonymous function": {
        "prefix": "function",
        "body": "function (${1:arguments}) {${2}}"
    },
    "immediately-invoked function expression": {
        "prefix": "iife",
        "body": ";((${1:arguments}) => {\n\t${3}\n})(${2})"
    },

    "console.log": {
        "prefix": "log",
        "body": "console.log(${1})"
    },
    "console.error": {
        "prefix": "error",
        "body": "console.error(${1})"
    },
    "console.warn": {
        "prefix": "warn",
        "body": "console.warn(${1})"
    },
    "console.dir": {
        "prefix": "dir",
        "body": "console.dir(${1})"
    },

    "For Loop": {
        "prefix": "for",
        "body": [
            "for (let ${1:index} = 0; ${1:index} < ${2:array}.length; ${1:index}++) {",
            "\tconst ${3:element} = ${2:array}[${1:index}]",
            "\t$4",
            "}"
        ],
        "description": "For Loop"
    },
    "For-In Loop": {
        "prefix": "forin",
        "body": [
            "for (const ${1:key} in ${2:object}) {",
            "\tif (${2:object}.hasOwnProperty(${1:key})) {",
            "\t\tconst ${3:element} = ${2:object}[${1:key}]",
            "\t\t$4",
            "\t}",
            "}"
        ],
        "description": "For-In Loop"
    },
    "For-Of Loop": {
        "prefix": "forof",
        "body": ["for (const ${1:iterator} of ${2:object}) {", "\t$3", "}"],
        "description": "For-Of Loop"
    },

    "If Statement": {
        "prefix": "if",
        "body": ["if (${1:condition}) {", "\t$2", "}"],
        "description": "If Statement"
    },
    "If-Else Statement": {
        "prefix": "ifelse",
        "body": ["if (${1:condition}) {", "\t$2", "} else {", "\t$3", "}"],
        "description": "If-Else Statement"
    },

    "New Statement": {
        "prefix": "new",
        "body": ["const ${1:name} = new ${2:type}(${3:arguments})"],
        "description": "New Statement"
    },
    "Switch Statement": {
        "prefix": "switch",
        "body": [
            "switch (${1:key}) {",
            "\tcase ${2:value}:",
            "\t\t$0",
            "\t\tbreak",
            "",
            "\tdefault:",
            "\t\tbreak",
            "}"
        ],
        "description": "Switch Statement"
    },
    "While Statement": {
        "prefix": "while",
        "body": ["while (${1:condition}) {", "\t$0", "}"],
        "description": "While Statement"
    },
    "Do-While Statement": {
        "prefix": "dowhile",
        "body": ["do {", "\t$0", "} while (${1:condition})"],
        "description": "Do-While Statement"
    },

    "reactClassCompoment": {
        "prefix": "component",
        "body": "import { Component } from 'react'\n\nclass ${1:$TM_FILENAME_BASE} extends Component {\n\trender () {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t$0\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default ${1:$TM_FILENAME_BASE}",
        "description": "Creates a React component class"
    },
    "reactFunctionComponent": {
        "prefix": "component",
        "body": "\nconst ${1:$TM_FILENAME_BASE} = () => {\n\treturn (\n\t\t<div>\n\t\t\t$0\n\t\t</div>\n\t)\n}\n\nexport default ${1:$TM_FILENAME_BASE}",
        "description": "Creates a React function component"
    },
    "classConstructor": {
        "prefix": "constructor",
        "body": "constructor (props) {\n\tsuper(props)\n\t$0\n}\n",
        "description": "Adds a default constructor for the class that contains props as arguments"
    },
    "componentSetStateObject": {
        "prefix": "setState",
        "body": "this.setState($0)",
        "description": "Performs a shallow merge of nextState into current state"
    },
    "useState": {
        "prefix": "useState",
        "body": "const [$1, set${1/(.*)/${1:/capitalize}/}] = useState($2)",
        "description": "React useState() hook"
    },
    "useEffect": {
        "prefix": "useEffect",
        "body": ["useEffect(() => {", "\t$1", "}, [$3])$0"],
        "description": "React useEffect() hook"
    }
}
